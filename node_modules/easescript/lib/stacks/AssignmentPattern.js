const Utils = require("../core/Utils");
const Declarator = require("./Declarator");
class AssignmentPattern extends Declarator{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isAssignmentPattern=true;
        this.left = Utils.createStack( compilation, node.left, scope, node ,this);
        this.right = Utils.createStack( compilation, node.right, scope, node ,this);
        this.acceptType = Utils.createStack( compilation, node.left.acceptType, scope, node ,this);
        if( this.isParamDeclarator && node.left.question ){
            this.left.error(1016);
        }
        const stack = this.getParentStack( stack=>!!(stack.isVariableDeclaration || stack.isBlockStatement) );
        if( stack && stack.isVariableDeclaration ){
            const context = stack.kind ==="var" ? 'function' : 'block';
            const name = this.left.value();
            if( scope.isDefine( name , context ) ){
                this.error(1007,name);
            }
        }
        scope.define( this.left.value(), this );
        this.assignValue = this.right;
        this.assignItems.add( this.right );
    }
    freeze(){
        super.freeze();
        this.left.freeze();
        this.right.freeze();
    }
    definition(){
        const type = this.type().toString();
        const identifier = this.value();
        const context = this;
        if( this.parentStack.isFunctionExpression ){
            return super.definition();
        }
        return {
            kind:this.kind,
            identifier:identifier,
            expre:`${this.kind} ${identifier}:${type}`,
            location:this.left.getLocation(),
            file:this.compilation.file,
            context
        };
    }
    value(){
        return this.left.value();
    }

    checker(){
        if( this.module && this.module.id === this.left.value() ){
            this.left.error(1008, this.left.value() );
        }
        this.acceptType && this.acceptType.checker();
        this.right.checker();
        const acceptType = this.acceptType ? this.acceptType.type() : null;
        const isStatement = this.parentStack.isFunctionExpression;
        const rType = this.right.type();
        const isNullable = rType && isStatement && rType === this.getGlobalTypeById("nullable");
        if( acceptType && !isNullable && !acceptType.check( this.right ) ){
            this.error(1009, this.right.type().toString(), this.left.type().toString() );
        }
        const lDesc = this.left.description();
        const rDesc = this.right.description();
        if( lDesc === rDesc ){
            this.error(1010,this.right.value());
        }
    }
    error(code,...args){
        this.left.error(code,...args);
    }

    warn(code,...args){
        this.left.warn(code,...args);
    }

    parser(){
        this.acceptType && this.acceptType.parser();
        this.right.parser();
    }
}

module.exports = AssignmentPattern;