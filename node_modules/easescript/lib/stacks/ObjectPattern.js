const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
class ObjectPattern extends Stack {
    constructor(compilation,node,scope,parentNode,parentStack){ 
        super(compilation,node,scope,parentNode,parentStack);
        this.isObjectPattern= true;
        this.properties = node.properties.map( item=>{
            const stack = Utils.createStack( compilation, item, scope, node,this);
            if( stack.isProperty ){
                if( !(stack.init && stack.init.isAssignmentPattern) ){
                    const context = parentStack.parentStack.kind ==="var" ? 'function' : 'block';
                    const name = stack.key.value();
                    if( scope.isDefine( name , context ) ){
                        this.error(1007,name);
                    }
                    scope.define(name, stack );
                }
            }
            return stack;
        });
    }
    freeze(){
        super.freeze();
        super.freeze( this.properties );
        (this.properties || []).forEach( stack=>stack.freeze() );
    }
    definition(){
        return null;
    }
    setKind(value){
        this.properties.forEach( item=>{
            item.kind=value;
        });
    }
    parser(){ 
        const init = this.parentStack.init;
        if( init ){
            const type = init.type();
            const base = this.getGlobalTypeById("Object");
            if( base && !base.check(type) || type.isNullableType ){
                init.error(1074, init.raw());
            }
        }else{
            init.error(1081);
        }
        this.properties.forEach( item=>item.parser() );
    }
    checker(){
        this.properties.forEach( item=>item.checker() );
    }
    value(){
        return this.properties.map( item=> {
            return item.value();
        }).join(",");
    }
}

module.exports = ObjectPattern;