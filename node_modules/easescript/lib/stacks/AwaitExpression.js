const Utils = require("../core/Utils");
const Expression = require("./Expression");
class AwaitExpression extends Expression{
     constructor(compilation,node,scope,parentNode,parentStack){
          node.name = "await";
          super(compilation,node,scope,parentNode,parentStack);
          this.isAwaitExpression= true;
          this.argument = Utils.createStack( compilation, node.argument, scope, node, this );
          if( parentStack ){
             parentStack.isAwaitExpression = true;
          }
          let parent = parentStack;
          while(parent && !parent.isFunctionExpression){
               parent.scope.hasChildAwait = true;
               parent.hasAwait=true;
               parent = parent.parentStack;
          }
          if( parent.isFunctionExpression ){
               parent.hasAwait=true;
          }
     }
     freeze(){
          super.freeze();
          this.argument.freeze();
     }
     definition(){
          return null;
     }
     checker(){
          const stack = this.getParentStack( stack=>!!stack.isFunctionExpression );
          if(!stack.async){
              this.error(1017);
          }
          const type = this.type();
          if( type ){
               const typeObj = type.isInstanceofType && type.extends && type.extends[0] ? type.extends[0] : type;
               if( typeObj !== this.getGlobalTypeById("Promise") ){
                    this.warn(1018);
               }
          }
          this.argument.checker();
     }
     description(){
          return this.argument.description();
     }
     type(){
          return this.argument.type();
     }
     parser(){
          this.argument.parser();
     }
}

module.exports = AwaitExpression;