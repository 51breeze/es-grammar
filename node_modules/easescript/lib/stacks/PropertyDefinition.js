const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
class PropertyDefinition extends Stack{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isPropertyDefinition= true;
        this._metatypes = [];
        this._annotations = [];
        this.kind = node.kind;
        this.modifier = Utils.createStack( compilation, node.modifier, scope, node,this );
        this.static  = Utils.createStack(compilation,node.static,scope,node,this);
        this.declarations = node.declarations.map( item=>{
            return Utils.createStack( compilation, item, scope, node,this );
        });
        this.isProperty=true;
        this.module.addMember(this.declarations[0].id.value(), this);
    }
    freeze(){
        super.freeze();
        super.freeze( this.declarations );
        this.modifier && this.modifier.freeze();
        this.static && this.static.freeze();
        this.declarations.forEach( stack=>stack.freeze() );
    }
    definition(){
        const identifier = this.value();
        const context    = this;
        const modifier = this.modifier ? this.modifier.value() : "public";
        const _static = this.static ? 'static ' : '';
        const def = this.declarations[0].definition();
        return {
            kind:"property",
            comments:context.comments,
            identifier:identifier,
            expre:`(property) ${_static}${modifier} ${def.expre}`,
            location:this.declarations[0].getLocation(),
            file:this.compilation.file,
            context
        };
    }
    set metatypes(value){
        this._metatypes = value;
    }
    get metatypes(){
       return this._metatypes;
    }
    set annotations(value){
        this._annotations = value;
    }
    get annotations(){
        return this._annotations;
    }
    get init(){
        return this.declarations[0].init;
    }
    get id(){
        return this.declarations[0].id;
    }
    get acceptType(){
        return this.declarations[0].acceptType;
    }
    get assignItems(){
        return this.declarations[0].assignItems;
    }
    get useRefItems(){
        return this.declarations[0].useRefItems;
    }
    addUseRef( stack ){
        this.useRefItems.add(stack);
    }
    assignment(value, stack=null){
        this.declarations[0].assignment(value, stack);
    }
    checker(){
        this.declarations[0].checker();
        const parent = this.module && this.module.extends[0];
        if( parent ){
            const modifier = this.modifier ? this.modifier.value() : "public";
            if(modifier!=="private"){
                const parentProperty = parent.getMember( this.id.value() );
                if( parentProperty && parentProperty.modifier && parentProperty.modifier.value() !=="private" ){
                    if( !parentProperty.isPropertyDefinition ){
                        this.id.error(1082,this.value())
                    }
                }
            }
        }
        const metatypes = this.metatypes;
        const annotations = this.annotations;
        metatypes && metatypes.forEach( item=>item.check() );
        annotations && annotations.forEach( item=>item.check() );
    }
    reference(){
        return this.declarations[0].reference();
    }
    referenceItems(){
        return this.declarations[0].referenceItems();
    }
    description(){
        return this.declarations[0].description();
    }
    type(){
        return this.declarations[0].type();
    }
    parser(){
        this.declarations[0].parser();
    }
    error(code,...args){
        this.declarations[0].error(code,...args)
    }
    warn(code,...args){
        this.declarations[0].warn(code,...args)
    }
    value(){
        return this.declarations[0].value();
    }
    raw(){
        return this.declarations[0].raw();
    }
}

module.exports = PropertyDefinition;