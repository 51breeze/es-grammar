const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
class WhenStatement extends Stack{

    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isWhenStatement= true;
        this.condition = Utils.createStack(compilation,node.test,scope,node,this);
        this.consequent = Utils.createStack(compilation,node.consequent,scope,node,this);
        this.alternate = Utils.createStack(compilation,node.alternate,scope,node,this);
    }

    freeze(){
        super.freeze();
        this.condition.freeze();
        this.consequent.freeze();
        this.alternate.freeze();
    }

    definition(){
        return null;
    }

    parser(){
        this.consequent.parser();
        this.consequent.setRefBeUsed();
        this.alternate && this.alternate.parser();
    }

    checker(){
        this.consequent.checker();
        this.alternate && this.alternate.checker();
    }
}

module.exports = WhenStatement;