const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
const Type = require("../types/Type");
const AnyType = require("../types/AnyType");
const VoidType = require("../types/VoidType");
const AliasType = require("../types/AliasType");
const NullableType = require("../types/NullableType");
class DeclaratorTypeAlias extends Stack{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isDeclaratorTypeAlias= true;
        this.left = Utils.createStack(compilation,node.left,scope,node,this);
        this.right = Utils.createStack(compilation,node.right,scope,node,this);
    }
    freeze(){
        super.freeze(this);
        this.left.freeze();
        this.right.freeze();
    }
    definition(){
        return this.type().definition();
    }
    set metatypes(value){
        this._metatypes = value;
    }
    get metatypes(){
       return this._metatypes;
    }
    set annotations(value){
        this._annotations = value;
    }
    get annotations(){
        return this._annotations;
    }
    get id(){
        return this.left.value();
    }
    createCompleted(){
        this.namespace.set(this.left.value(), this.type() );
    }
    checker(){
        const value = this.right.value();
        switch( value ){
            case 'any' :
            case 'nullable' :
            case 'void' :
                return;
        }
        this.right.checker();
        // const type = this.getModuleById( this.right.value() );
        // if( !(type instanceof Type) ){
        //     this.error(1040,this.value());
        // }
    }
    reference(){
        return this.right.reference();
    }
    referenceItems(){
        return this.right.referenceItems();
    }
    description(){
        return this.right.description();
    }
    type(){
        if( this._type )return this._type;
        const value = this.right.value();
        switch( value ){
            case 'any' :
                return this._type = new AnyType(value);
            case 'nullable' :
                return this._type = new NullableType(value)
            case 'void' :
                return this._type = new VoidType(value)
        }
        return this._type = new AliasType(this.right.type(), this);
    }
    parser(){
        this.right.parser(true);
    }
    error(code,...args){
        this.left.error(code,...args)
    }
    warn(code,...args){
        this.left.warn(code,...args)
    }
    value(){
        return this.left.value();
    }
    raw(){
        return this.left.raw();
    }
    emit(){}
}
module.exports = DeclaratorTypeAlias;