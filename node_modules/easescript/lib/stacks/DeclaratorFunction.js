const Utils = require("../core/Utils");
const FunctionExpression = require("./FunctionExpression");
class DeclaratorFunction extends FunctionExpression{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isDeclaratorFunction= true;
        this.key = Utils.createStack(compilation,node.id,scope,node,this);
        const name = this.key.value();
        if( this.namespace.has( name ) && this.namespace.get( name ).compilation === this.compilation ){
            this.key.error(1078,name);
        }
        this.namespace.set(name,this);
    }
    freeze(){
        super.freeze();
        this.key.freeze();
    }
    definition(called){
        const type = this.type(called).toString();
        const identifier = this.key.value();
        const context = this;
        const params  = this.params.map( item=>`${item.raw()}:${item.type().toString()}`);
        return {
            kind:"function",
            comments:context.comments,
            identifier:identifier,
            expre:`function ${identifier}(${params.join(",")}):${type}`,
            location:this.key.getLocation(),
            file:this.compilation.file,
            context
        };
    }
}
module.exports = DeclaratorFunction;