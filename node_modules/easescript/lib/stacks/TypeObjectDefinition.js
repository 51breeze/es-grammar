const LiteralObjectType = require("../types/LiteralObjectType");
const Utils = require("../core/Utils");
const Expression = require("./Expression");
const keySymbol = Symbol("key");
class TypeObjectDefinition extends Expression{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isTypeObjectDefinition= true;
        this.attributes = new Map();
        this.properties = node.properties.map( item=>{
            const stack = Utils.createStack( compilation, item, scope, node,this );
            const name = stack.value();
            if( this.attributes.has(name) ){
                stack.error(1045,name)
            }else{
                this.attributes.set( stack.value(), stack );
            }
            return stack;
        });
        this[keySymbol]={};
    }
    freeze(){
        super.freeze();
        super.freeze( this.attributes );
        this.properties.forEach( stack=>stack.freeze() );
    }
    attribute(name){
        return this.attributes.get(name) || null;
    }
    hasAttribute(name){
        return this.attributes.has(name);
    }
    reference(){
        return this;
    }
    referenceItems(){
        return [this];
    }
    definition(){
        return null;
    }
    description(){
        return this;
    }
    type(){
        return this[keySymbol]._type || (this[keySymbol]._type = new LiteralObjectType(this.getGlobalTypeById("object"),this));
    }
    parser(){
        this.properties.forEach( item=>item.parser() );
    }
    checker(){
        this.properties.forEach( item=>item.checker() );
    }
    value(){
        return super.raw();
    }
}

module.exports = TypeObjectDefinition;