const Utils = require("../core/Utils");
const Expression = require("./Expression");
const LiteralObjectType = require("../types/LiteralObjectType");
const keySymbol = Symbol("key");
class ObjectExpression extends Expression{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isObjectExpression= true;
        this.attributes = new Map();
        this.hasChildComputed = false;
        this.properties = node.properties.map( item=>{
            const stack = Utils.createStack( compilation, item, scope, node,this );
            const name = stack.value();
            if( this.attributes.has(name) ){
                stack.error(1045,name)
            }else{
                this.attributes.set( stack.value(), stack );
            }
            this.hasChildComputed = this.hasChildComputed || stack.computed;
            return stack;
        });
        this[keySymbol] = {};
    }
    freeze(){
        super.freeze();
        super.freeze( this.properties );
        (this.properties || []).forEach( stack=>stack.freeze() );
    }
    definition(){
        const context= this.parentStack.isProperty && this.parentStack.parentStack.isObjectExpression ? this.parentStack : this;
        return {
            kind:"object",
            comments:context.comments,
            identifier:context.value(),
            expre:this.type().toString(),
            location:context.getLocation(),
            file:context.compilation.file,
            context
        };
    }
    attribute(name,value){
        if( value !== void 0 ){
            this.attributes.set(name,value);
            return value;
        }
        return this.attributes.get(name) || null;
    }
    hasAttribute(name){
        return this.attributes.has(name);
    }
    reference(){
        return this;
    }
    referenceItems(){
        return [this];
    }
    description(){
        return this;
    }
    type(){
        return this[keySymbol]._type || (this[keySymbol]._type = new LiteralObjectType(this.getGlobalTypeById("object"),this));
    }
    parser(){
        this.properties.forEach( item=>{
            item.parser();
        });
    }
    checker(){
        this.properties.forEach( item=>{
            item.checker();
        });
    }
    value(){
        return super.raw();
    }
}

module.exports = ObjectExpression;