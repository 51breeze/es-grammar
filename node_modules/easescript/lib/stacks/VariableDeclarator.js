const Utils = require("../core/Utils");
const Declarator = require("./Declarator");
class VariableDeclarator extends Declarator {
    constructor(compilation,node,scope,parentNode,parentStack){ 
        super(compilation,node,scope,parentNode,parentStack);
        this.isVariableDeclarator= true;
        this.kind = parentNode.kind;
        this.id = Utils.createStack( compilation,node.id, scope, node, this);
        this.acceptType = Utils.createStack(compilation,node.id.acceptType,scope,node,this); 
        this.init = Utils.createStack( compilation, node.init, scope, node, this);
        this.isPattern = false;
        if( parentStack && !parentStack.isDeclaratorProperty ){
            if( this.id.isIdentifier ){
                this.assignItems.add( this.init );
                this.assignValue = this.init;
                if( !parentStack.isDeclaratorVariable ){
                    const context = this.kind ==="var" ? "function" : "block";
                    const name = this.id.value();
                    if( scope.isDefine(name , context) ){
                        this.error(1007,this.value());
                    }
                    scope.define( name, this );
                }
            }else if(this.id.isObjectPattern || this.id.isArrayPattern){
                this.isPattern = true;
                this.id.setKind(this.kind);
            }
        }
    }

    freeze(){
        super.freeze();
        this.id.freeze();
        this.acceptType && this.acceptType.freeze();
        this.init && this.init.freeze();
    }

    type(){
        const type = super.type();
        if( this.parentStack.flag && this.parentStack.parentStack.isForInStatement && type === this.getGlobalTypeById("any") ){
            return this.getGlobalTypeById("string");
        }
        return type;
    }

    definition(){
        const type = this.type().toString();
        const identifier = this.id.value();
        const token = this.parentStack.isPropertyDefinition ?  `${this.module.id}.${identifier}` : identifier;
        const desc = this.description();
        const expre = desc.isFunctionExpression ? `${this.kind} ${token}:()=>${desc.type().toString()}` : `${this.kind} ${token}:${type}`;
        return {
            kind:this.kind,
            comments:this.parentStack.comments,
            identifier:identifier,
            expre:expre,
            location:this.id.getLocation(),
            file:this.compilation.file,
            context:this.parentStack
        };
    }

    parser(){ 
        if( super.parser() === false )return false;
        if(this.id.isObjectPattern || this.id.isArrayPattern){
            this.id.parser();
        }
        this.acceptType && this.acceptType.parser();
        this.init && this.init.parser();
        const initDesc = this.init && this.init.description();
        if( initDesc && initDesc.isDeclarator && initDesc !== this ){
            initDesc.parser();
        }
    }

    checker(){
        if(this.id.isObjectPattern || this.id.isArrayPattern){
            this.id.checker();
        }
        if( this.acceptType ){
            this.acceptType.checker();
        }
        if( this.module && this.module.id === this.value() ){
            this.id.error(1008,this.id.value());
        }
        if( this.init ){
            this.init.checker();
            const acceptType = this.acceptType ? this.acceptType.type() : null;
            if( acceptType ){
                if( !acceptType.check( this.init ) ){
                    this.init.error(1009,this.init.type().toString(),acceptType.toString());
                }
            }
            const description = this.init.description();
            if( this === description ){
                this.error(1010,this.init.value());
            }
        }
        if( !(this.acceptType || this.init || this.assignValue) && !this.parentStack.flag ){
            this.id.warn(1011,this.id.value());
        }
    }

    value(){
        return this.id.value();
    }
    raw(){
        return this.id.raw();
    }
    error(code,...args){
        this.id.error(code,...args)
    }
    warn(code,...args){
        this.id.warn(code,...args)
    }
}

module.exports = VariableDeclarator;