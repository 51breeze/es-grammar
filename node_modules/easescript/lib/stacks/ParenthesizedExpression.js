const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
class ParenthesizedExpression extends Stack{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isParenthesizedExpression= true;
        this.expression = Utils.createStack(compilation,node.expression,scope,node,this);
    }
    freeze(){
        super.freeze();
        this.expression.freeze();
    }
    definition(){
        return this.expression.definition();
    }
    reference(){
        return this.expression.reference();
    }
    referenceItems(){
        return this.expression.referenceItems();
    }
    checker(){
        if(!this.expression){
            this.error(1079);
        }else{
            this.expression.checker();
        }
    }
    type(){
        return this.expression.type();
    }
    description(){
        return this.expression.description();
    }
    parser(){
        if( super.parser() ){
            this.expression && this.expression.setRefBeUsed();
            return this.expression && this.expression.parser();
        }
    }
    value(){
        return this.expression.value();
    }
    raw(){
        return this.expression.raw(); 
    }
}

module.exports = ParenthesizedExpression;