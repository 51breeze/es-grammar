const Utils = require("../core/Utils");
const Expression = require("./Expression");
class BinaryExpression extends Expression{
     constructor(compilation,node,scope,parentNode,parentStack){
          super(compilation,node,scope,parentNode,parentStack);
          this.isBinaryExpression= true;
          this.left = Utils.createStack( compilation, node.left, scope, node,this );
          this.right = Utils.createStack( compilation, node.right, scope, node,this );
     }
     freeze(){
          super.freeze();
          this.left.freeze();
          this.right.freeze();
     }
     definition(){
          return null;
     }
     reference(){
          return this;
     }
     referenceItems(){
          return [this];
     }
     description(){
          return this;
     }
     type(){
          const operator = this.node.operator;
          if( operator ==="instanceof" || operator ==="is" ){
               return this.getModuleById("boolean");
          }else{
               const code = operator.charCodeAt(0);
               if( code === 60 || code===61 || code===62 ){
                    return this.getModuleById("boolean");
               }else if(code ===43){
                   const stringType = this.getGlobalTypeById("string");
                   if( stringType.check(this.left) || stringType.check(this.right) ){
                        return stringType;
                   } 
               }
               return this.getModuleById("number");
          }
     }
     checker(){
          const operator = this.node.operator;
          if( operator ==="instanceof" || operator ==="is" ){
               this.left.checker();
               this.right.checker();
               const lType = this.left.type();
               if( lType && !lType.isInstanceofType ){
                    const leftRefs = this.left.referenceItems();
                    if( !leftRefs.every( item=>!!item.type().isInstanceofType ) ){
                         if( leftRefs.length===1 ){
                              this.left.error(1019,this.left.value())
                         }else{
                              this.left.warn(1020,this.left.value())   
                         }
                    }
               }
               const rightType = this.right.description();
               if( !Utils.isTypeModule( rightType ) ){
                    const rightRefs = this.right.referenceItems();
                    if( !rightRefs.every( item=>Utils.isTypeModule(item.description()) ) ){
                         if( rightRefs.length ===1 ){
                              this.right.error(1021,operator);
                         }else{
                              this.right.warn(1021,operator);
                         }
                    }
               }else{
                   this.compilation.addDependency(rightType,this.module);
               }
          }
     }
     parser(){
          this.left.parser();
          this.left.setRefBeUsed();
          this.right.parser();
          this.right.setRefBeUsed();
     }
}

module.exports = BinaryExpression;