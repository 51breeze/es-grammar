const Declarator = require("./Declarator");
const TupleType = require("../types/TupleType");
class RestElement extends Declarator{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node.argument,scope,parentNode,parentStack);
        this.isRestElement= true;
        scope.define(this.value(), this);
    }
    definition(){
        const type = this.type().toString();
        const identifier = this.value();
        const context = this;
        const kind = this.parentStack.isFunctionExpression ? "(parameter)" : this.kind;
        return {
            kind:kind,
            comments:context.comments,
            identifier:identifier,
            expre:`${kind} ...${identifier}:${type}`,
            location:this.getLocation(),
            file:this.compilation.file,
            context
        };
    }
    type(){
        if( this._type ){
            return this._type;
        }
        const type = this.acceptType ? this.acceptType.type() : this.getGlobalTypeById("any");
        if( type.isTupleType ){
            return this._type = type;
        }
        return this._type = new TupleType(this.getModuleById("Array"), type, this);
    }
    checker(){
        if( this.acceptType ){
            const type = this.acceptType.type();
            if( !type.isTupleType ){
                this.error(1071)
            }
        }
    }
    parser(){
        this.acceptType && this.acceptType.parser();
    }
}

module.exports = RestElement;