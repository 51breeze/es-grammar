const Utils = require("../core/Utils");
const Expression = require("./Expression");
class TypeTransformExpression extends Expression{
     constructor(compilation,node,scope,parentNode,parentStack){
          super(compilation,node,scope,parentNode,parentStack);
          this.isTypeTransformExpression= true;
          this.typeExpression = Utils.createStack( compilation, node.expression, scope, node,this );
          this.referExpression = Utils.createStack( compilation, node.value, scope, node,this );
     }
     freeze(){
          super.freeze();
          this.ktypeExpressioney.freeze();
          this.referExpression.freeze();
     }
     definition(){
          return this.referExpression.definition();
     }
     description(){
          return this.referExpression.description();
     }
     reference(){
          return this.referExpression.reference();
     }
     referenceItems(){
          return this.referExpression.referenceItems();
     }
     type(){
          return this.typeExpression.type();
     }
     parser(){
          this.typeExpression.parser();
          this.referExpression.parser();
          this.referExpression.setRefBeUsed();
     }
     checker(){
          this.typeExpression.checker();
          this.referExpression.checker();
     }
}

module.exports = TypeTransformExpression;