const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
class WhileStatement extends Stack{

     constructor(compilation,node,scope,parentNode,parentStack){
          super(compilation,node,scope,parentNode,parentStack);
          this.isWhileStatement= true;
          this.condition = Utils.createStack(compilation,node.test,scope,node,this);
          this.body = Utils.createStack(compilation,node.body,scope,node,this);
     }
     definition(){
          return null;
     }

     freeze(){
          super.freeze();
          this.condition.freeze();
          this.body.freeze();
     }

     parser(){
          if( this.condition  ){
               this.condition.parser();
               this.condition.setRefBeUsed();
          }
          this.body && this.body.parser();
     }

     checker(){
          if( !this.condition ){
               return this.error(1041);
          }
          const desc = this.condition.description();
          if( desc.isLiteral ){
             const has = this.body.body.some( item=>item.isReturnStatement || item.isBreakStatement);
             if( !has ){
                this.condition.warn(1042)
             }
          }
     }
}

module.exports = WhileStatement;