const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
const Namespace = require("../core/Namespace.js");
class PackageDeclaration extends Stack{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isPackageDeclaration= true;
        this.id = Utils.createStack( compilation, node.id, scope, node, this );
        this.namespace = compilation.namespace = Namespace.create( this.id ? this.id.value() : null );
        const metatypes = [];
        const annotations = [];
        const imports = [];
        this.body=[];
        const externals = parentStack.externals || [];
        node.body.forEach( (item,index)=>{
            const stack = Utils.createStack( compilation, item, scope, node, this );
            if( stack.isMetatypeDeclaration ){
                metatypes.push( stack );
            }else if(stack.isAnnotationDeclaration ){
                annotations.push( stack );
            }else if(stack.isImportDeclaration ){
                imports.push( stack );
                this.body.push(stack);
            }else{
                stack.metatypes = metatypes.splice(0,metatypes.length);
                stack.annotations = annotations.splice(0,annotations.length);
                if( stack.isClassDeclaration || 
                    stack.isDeclaratorDeclaration || 
                    stack.isEnumDeclaration || 
                    stack.isInterfaceDeclaration ||
                    stack.isDeclaratorVariable   || 
                    stack.isDeclaratorFunction   || 
                    stack.isDeclaratorTypeAlias 
                ){
                    if( externals.length > 0 ){
                        externals[0].error(1091)
                    }
                    stack.imports = imports.splice(0,imports.length);
                    this.body.push(stack);
                }else{
                    externals.push(stack);
                }
            }
        });
        parentStack.externals = imports.concat(externals);
    }

    freeze(){
        super.freeze(this);
        super.freeze(this.id);
        super.freeze(this.body);
        this.body.forEach(stack=>stack.freeze());
    }

    createCompleted(){
        this.body.forEach( item=>{
            item.createCompleted();
        });
    }

    checkDepend(module, depModule){
        return depModule.extends.concat(depModule.implements).some( depModule=>{
            if(depModule === module)return true;
            return this.checkDepend(module,depModule);
        });
    }

    definition(){
        return null;
    }

    parser(){
        this.body.forEach(item =>{
            item.parser();
        });
    }
    
    checker(){
        this.body.forEach(item =>{
            item.checker();
        });
    }
}

module.exports = PackageDeclaration;