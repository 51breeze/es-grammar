const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
const FunctionType = require("../types/FunctionType");
const Declarator = require("./Declarator");
const keySymbol = Symbol("key");
class TypeFunctionDefinition extends Stack {
    constructor(compilation,node,scope,parentNode,parentStack){ 
        super(compilation,node,scope,parentNode,parentStack);
        this.isTypeFunctionDefinition= true;
        this.returnType = Utils.createStack(compilation,node.value, scope, node, this);
        let assignment = null;
        let hasRest = null;
        this.params = node.params.map( item=>{
            if( item.type =="Identifier" ){
                const stack = new Declarator(compilation,item,scope,node,this);
                if( assignment ){
                    assignment.error(1050,assignment.value()); 
                }
                scope.define(stack.value(), stack);
                return stack;
            }else{
                const stack = Utils.createStack(compilation,item,scope,node,this);
                if( stack.isRestElement ){
                    hasRest = stack;
                }
                assignment = stack;
                return stack;
            }
        });
        if( hasRest && this.params[ this.params.length-1 ] !== hasRest ){
            hasRest.error(1051,hasRest.value());
        }
        this[keySymbol]={};
    }
    freeze(){
        super.freeze();
        super.freeze( this.params );
        this.returnType && this.returnType.freeze();
        this.params.forEach( stack=>stack.freeze() );
    }
    definition(){
       return null;
    }
    description(){
        return this;
    }
    referenceItems(){
        return [this];
    }
    type( called ){
        if( called ){
            return this[keySymbol]._type || (this[keySymbol]._type =this.returnType ? this.returnType.type() : this.getGlobalTypeById("any"));
        }
        return this.getFunType();
    }

    getFunType(){
        return this[keySymbol]._funType || (this[keySymbol]._funType =new FunctionType(this.getGlobalTypeById("Function"), this));
    }

    checker(){
        this.params.forEach( item=>item.checker() );
        this.returnType && this.returnType.checker();   
    }
    parser(){
        this.params.forEach( item=>item.parser() );
        if( this.returnType ){
            this.returnType.parser();
            if( !this.returnType.type() ){
                this.returnType.error(1083, this.returnType.value() );
            }
        }
    }
}

module.exports = TypeFunctionDefinition;