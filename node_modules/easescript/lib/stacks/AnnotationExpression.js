const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
const BlankScope = require("../scope/BlankScope");
class AnnotationExpression extends Stack{
    constructor(compilation,node,scope,parentNode,parentStack){
        scope = new BlankScope( null );
        super(compilation,node,scope,parentNode,parentStack);
        this.isAnnotationExpression=true;
        this.body = (node.body || []).map( item=>{
            return Utils.createStack(compilation,item,scope,node,this);
        });
        this.arguments = null;
    }
    get name(){
        return this.node.name;
    }
    freeze(){
        super.freeze(this);
        super.freeze(this.body);
        super.freeze(this.scope);
        this.body.forEach(stack=>stack.freeze());
    }
    definition(){
        return null;
    }
    description(){
        return this;
    }
    getArguments(){
        let target=this.arguments;
        if( target ){
            return target;
        }
        target = [];
        this.body.map( (item,index)=>{
            if(item.isAssignmentPattern){
                const key = item.left.value().toLowerCase();
                const value = item.right.value();
                const assigned = true;
                target.push({key,value,assigned,stack:item});
            }else{
                const key = index;
                const value = item.value();
                const assigned = false;
                target.push({key,value,assigned,stack:item});
            }
        });
        this.arguments = target;
        return target;
    }
    parser(){
        if( super.parser() ){
            const item = this.getArguments().find( item=>item.key==='className' );
            if( item ){
                const moduleClass = this.getModuleById( item.value );
                if( !moduleClass ){
                    item.error(1027, item.value);
                }
                switch ( this.name ) {
                    case 'Provider':
                        this.compilation.setPolicy(2,this.module);
                        break;
                    default:
                        break;
                }
            }
            return true;
        }
        return false;
    }
}

module.exports = AnnotationExpression;