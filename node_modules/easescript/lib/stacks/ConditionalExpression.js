const Utils = require("../core/Utils");
const Expression = require("./Expression");
const UnionType = require("../types/UnionType");
class ConditionalExpression extends Expression{
     constructor(compilation,node,scope,parentNode,parentStack){
          super(compilation,node,scope,parentNode,parentStack);
          this.isBinaryExpression= true;
          this.test = Utils.createStack( compilation, node.test, scope, node,this );
          this.consequent = Utils.createStack( compilation, node.consequent, scope, node,this );
          this.alternate = Utils.createStack( compilation, node.alternate, scope, node,this );
     }
     freeze(){
          super.freeze();
          this.consequent.freeze();
          this.alternate.freeze();
     }
     definition(){
          return null;
     }
     reference(){
          return this;
     }
     referenceItems(){
          return this.consequent.referenceItems().concat( this.alternate.referenceItems() );
     }
     description(){
          return this;
     }
     type(){
          return this._type || (this._type=new UnionType([this.consequent.type(),this.alternate.type()]));
     }
     checker(){
          this.test.checker();
          this.consequent.checker();
          this.alternate.checker();
     }
     parser(){
          this.test.parser();
          this.test.setRefBeUsed();
          this.consequent.parser();
          this.setRefBeUsed.parser();
          this.alternate.parser();
          this.setRefBeUsed.parser();
     }
}

module.exports = ConditionalExpression;