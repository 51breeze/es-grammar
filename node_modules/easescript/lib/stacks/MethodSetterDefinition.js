const MethodDefinition = require("./MethodDefinition");
const Utils = require("../core/Utils");
class MethodSetterDefinition extends MethodDefinition{

    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isMethodSetterDefinition= true;
        this.callable = false;
        this.assignValue = null;
        this.assignItems= new Set();
        this.isAccessor = true;
    }
    freeze(){
        super.freeze();
        super.freeze( this.assignItems );
    }
    definition(){
        const identifier = this.key.value();
        const context = this;
        const params  = this.params.map( item=>`${item.raw()}:${item.type().toString()}`);
        const modifier = this.modifier ? this.modifier.value() : "public";
        const owner = this.module.id;
        const _static = this.static ? 'static ' : '';
        return {
            kind:"setter",
            comments:context.comments,
            identifier:identifier,
            expre:`(propery) ${_static}${modifier} set ${owner}.${identifier}(${params.join(",")}):void`,
            location:this.key.getLocation(),
            file:this.compilation.file,
            context
        };
    }
    checker(){
        this.expression.checker();
        if( this.expression.params.length != 1 ){
            this.error(1067,this.key.value());
        }
        const param = this.expression.params[0];
        const type = param.acceptType ? param.acceptType.type() : this.getModuleById("any");
        const desc = this.compilation.getReference(this.key.value(), this.module, !!this.static , "get");
        const returnType = desc.type()
        if( returnType !== type ){
            this.error(1068,this.key.raw());
        }
    }

    type(){
        return this.getModuleById("void");
    }
    
    getFunType(){
        return null;
    }

    referenceItems(){
        return [];
    }

    reference(){
        return null;
    }

    assignment( value, stack=null ){
        if( this.assignValue !== value ){
            const param = this.expression.params[0];
            let acceptType = param.acceptType ? param.acceptType.type() : null;
            if( !acceptType ){
                const desc = this.compilation.getReference(this.key.value(), this.module, !!this.static , "get");
                acceptType = desc ? desc.type() : null;
            }
            if( acceptType && !acceptType.check( value) ){
                (stack||this).error(1009,value.type().toString(),acceptType.toString());
            }
            this.assignItems.add( value );
            this.assignValue = value;
            if( value && value.isStack ){
                this.setRefBeUsed( value.description() );
            }
        }
    }
}

module.exports = MethodSetterDefinition;