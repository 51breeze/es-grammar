const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
const InstanceofType = require("../types/InstanceofType");
class DeclaratorVariable extends Stack{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isDeclaratorVariable= true;
        this.declarations = node.expression.declarations.map((item)=>Utils.createStack(compilation,item,scope,node,this));
        this.declarations.forEach( item=>{
            if( this.namespace.has( item.id.value() ) && this.namespace.get( item.id.value() ).compilation === this.compilation ){
                item.id.error(1078,item.id.value());
            }
            this.namespace.set(item.id.value(), this);
        });
    }
    freeze(){
        super.freeze(this);
        super.freeze(this.declarations);
        this.declarations.forEach( stack=>stack.freeze() )
    }
    definition(){
        const identifier = this.value();
        const context    = this;
        const def = this.declarations[0].definition();
        return {
            kind:"property",
            comments:context.comments,
            identifier:identifier,
            expre:`(global) ${def.expre}`,
            location:this.declarations[0].getLocation(),
            file:this.compilation.file,
            context
        };
    }
    set metatypes(value){
        this._metatypes = value;
    }
    get metatypes(){
       return this._metatypes;
    }
    set annotations(value){
        this._annotations = value;
    }
    get annotations(){
        return this._annotations;
    }
    get kind(){
        return this.declarations[0].kind;
    }
    get init(){
        return this.declarations[0].init;
    }
    get id(){
        return this.declarations[0].value();
    }
    get acceptType(){
        return this.declarations[0].acceptType;
    }
    get assignItems(){
        return this.declarations[0].assignItems;
    }
    checker(){
        this.declarations[0].checker();
        const metatypes = this.metatypes;
        const annotations = this.annotations;
        metatypes && metatypes.forEach( item=>item.checker() );
        annotations && annotations.forEach( item=>item.checker() );
    }
    reference(){
        return this.declarations[0].reference();
    }
    referenceItems(){
        return this.declarations[0].referenceItems();
    }
    description(){
        return this;
    }
    type(){
        return this._type || (this._type = new InstanceofType(this.declarations[0].type(), this));
    }
    parser(){
        this.declarations[0].parser();
    }
    error(code,...args){
        this.declarations[0].error(code,...args)
    }
    warn(code,...args){
        this.declarations[0].warn(code,...args)
    }
    value(){
        return this.declarations[0].value();
    }
    raw(){
        return this.declarations[0].raw();
    }
}
module.exports = DeclaratorVariable;