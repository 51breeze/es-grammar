const MethodDefinition = require("./MethodDefinition");
class MethodGetterDefinition extends MethodDefinition{
    constructor(compilation,node,scope,parentNode,parentStack){
        super(compilation,node,scope,parentNode,parentStack);
        this.isMethodGetterDefinition= true;
        this.callable = false
        this.isAccessor = true;
    }
    definition(){
        const type = this.type().toString();
        const identifier = this.key.value();
        const context = this;
        const modifier = this.modifier ? this.modifier.value() : "public";
        const owner = this.module.id;
        const _static = this.static ? 'static ' : '';
        return {
            kind:"getter",
            comments:context.comments,
            identifier:identifier,
            expre:`(propery) ${_static}${modifier} get ${owner}.${identifier}():${type}`,
            location:this.key.getLocation(),
            file:this.compilation.file,
            context
        };
    }
    checker(){
        this.expression.checker();
        if( this.expression.params.length != 0 ){
            this.error(1065,this.key.value());
        }
        const isInterface = this.module && (this.module.isDeclaratorModule || this.module.isInterface);
        if( this.scope.returnItems.length < 1 && !isInterface){
            this.error(1066,this.key.value());
        }  
    }
    type(){
        return super.type(true);
    }
    referenceItems(){
        return super.referenceItems(true);
    }
    reference(){
        return super.reference(true);
    }
    getFunType(){
        return null;
    }
}

module.exports = MethodGetterDefinition;