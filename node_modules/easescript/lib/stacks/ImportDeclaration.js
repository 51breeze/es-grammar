const Stack = require("../core/Stack");
const Utils = require("../core/Utils");
class ImportDeclaration extends Stack{
   constructor(compilation,node,scope,parentNode,parentStack){
      super(compilation,node,scope,parentNode,parentStack);
      this.isImportDeclaration= true;
      this.specifiers = Utils.createStack( compilation, node.specifiers, scope, node,this );
      this.alias = Utils.createStack( compilation, node.alias, scope, node,this );
   }
   freeze(){
      super.freeze(this);
      super.freeze(this.alias);
      super.freeze(this.specifiers);
   }
   definition(){
      const context = this.description();
      if( context.isType && context.isModule && (context.isClass || context.isDeclarator || context.isInterface) ){
         const type = this.type().toString();
         const identifier = this.value();
         const kind = context.isClass ? 'class' : context.isDeclarator ? "declarator" : "interface";
         const owner = context.getName();
         return {
               kind:"import",
               comments:context.comments,
               identifier:identifier,
               expre:`(import) ${kind} ${owner}`,
               type:type,
               start:this.node.start,
               end:this.node.end,
               file:context.compilation.file,
               context
         };
      }
   }
   description(){
      return this.specifiers.description();
   }
   parser(){
      if( this.parentStack && this.parentStack.isProgram ){
         const module = this.getModuleById( this.specifiers.value() );
         if( module && module.id ){
            const nameId = this.alias ? this.alias.value() :  module.id;
            this.scope.define(nameId, module);
         }else{
            this.specifiers.error(1026,this.specifiers.value())
         }
      } 
   }

   type(){
      return this.specifiers.type();
   }

   value(){
     return this.specifiers.value();
   }
   
   raw(){
     return this.specifiers.raw();
   }
}

module.exports = ImportDeclaration;
