class Type{
    constructor( id , inherit){
        this._id = id;
        this.extends= inherit;
        this.alias = null;
        this.isType = true;
    }
    set id(name){
        this._id = name;
    }
    get id(){
        return this._id;
    }
    set extends( _extends ){
        if( _extends ){
            if( _extends instanceof Array){
                this._extends=_extends;
            }else{
                this._extends=[_extends];
            }
        }
    }
    get extends(){
        return this._extends || [];
    }
    get inherit(){
        return this._extends ? this._extends[0] : null;
    }
    clone(inference){
        if( this.isGenericType && inference){
            return inference(this);
        }
        return this;
    }
    definition(){ 
        return {expre:`(type) ${this.toString()}`};
    }
    check(stack){
        return this.is( stack && stack.type() );
    }
    type(){
        return this;
    }
    getTypeByGeneric(genericType){
        return genericType;
    }
    is( type ){
        if( !type || !(type instanceof Type) )return false;
        if( this === type )return true;
        while( type && (type = type.inherit) ){
            if( this === type ){
                return true;
            }
        }
        return false;
    }
    toString(){
        return this._id;
    }
}
module.exports = Type;