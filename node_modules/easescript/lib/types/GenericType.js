const Type = require("./Type");
class GenericType extends Type{
    constructor( target, inherit=null, assignType=null, isFunGeneric=false){
        super('$GenericType', inherit);
        this.target = target;
        this.isGenericType=true;
        this.assignType = assignType;
        this.hasConstraint = !!inherit;
        this.isFunGeneric = isFunGeneric;
    }
    attribute( property ){
        const inherit = this.inherit;
        if( !inherit ){
            return null;
        }
        if( inherit.isLiteralObjectType ){
            return inherit.attribute( property );
        }else if( inherit.isModule ){
            return inherit.getMember(property,"get");
        }
        return null;
    }
    check(stack,flag){
        const type = stack && stack.type();
        if( type ){
            if( flag && type.isGenericType && !this.assignType && !this.hasConstraint ){
               return true;
            }
            return this.is( type );
        }
        return false;
    }
    is( type ){
        if( !type || !(type instanceof Type) )return false;
        if( type === this || (this === type.target && type.isGenericValueType) || type.isNullableType || type.isAnyType )return true;
        const inherit = this.inherit || this.assignType;
        if( inherit ){
            if( inherit && inherit.isLiteralObjectType){
                return inherit.constraint(type);
            }else{
                return inherit.is(type);
            }
        }
        return false;
    }
    toString(flag){
        const inherit = this.inherit;
        const parts = [];
        parts.push( this.target.value() );
        if( flag ){
            if( inherit ){
                parts.push(` extends ${inherit.toString()}`);
            }else if( this.assignType ){
                parts.push( ' = '+this.assignType.toString() )
            }
        }
        return parts.join('')
    }

}
module.exports = GenericType;