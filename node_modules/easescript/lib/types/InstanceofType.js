const Type = require("./Type");
class InstanceofType extends Type{
    constructor(inherit,target){
        super("$InstanceofType",inherit);
        this.target = target;
        this.isInstanceofType = true;
    }
    is( type ){
        if( !type || !(type instanceof Type) )return false;
        if( type.isGenericValueType ){
            type = type.value;
            if( !type ){
                return true;
            }
        }
        if( type === this || type.isNullableType || type.isAnyType )return true;
        if( type.target === this.target && type.isInstanceofType )return true;
        if( this.target.isNewExpression && this.target.genericity ){
            const lGenerics = this.target.genericity;
            const tGenerics = type.isInstanceofType && type.target.isNewExpression ? type.target.genericity : null;
            if( !tGenerics || lGenerics.length != tGenerics.length ){
                return false;
            }
            if( !lGenerics.every( (item,index)=>item.type().is( tGenerics[index].type() ) ) ){
                return false;
            }
        }
        return this.inherit.is( type.isInstanceofType ? type.inherit : type );
    }
    toString(){
        if( this.target && (this.target.isThisExpression || this.target.isThisType) ){
            return this.target.value();
        }
        if( this.target.isNewExpression ){
            if( this.target.genericity ){
                const generics = this.target.genericity.map( item=>item.type().toString() );
                return `${this.inherit.id}<${generics.join(",")}>`;
            }else{
                const baseType = this.inherit;
                const declares =baseType.isModule && baseType.getModuleGenerics() || [];
                const generics = declares.map( (item)=>{
                    const declareType  =this.target.getTypeByGeneric(item.type(),true,true);
                    return declareType.toString();
                });
                return `${this.inherit.id}<${generics.join(",")}>`;
            }
        }
        return this.inherit.toString();
    }
}
module.exports = InstanceofType;