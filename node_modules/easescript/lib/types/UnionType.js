const Type = require("./Type"); 
class UnionType extends Type{
    constructor( elements , target ){
        super("$UnionType");
        this.isUnionType = true;
        this.elements = elements;
        this.target = target;
        this.hasGeneric = this.elements.some(item=>{
            const type =  item.type();
            return type && !!(type.isGenericType || type.hasGeneric);
        });
    }
    clone(inference){
        if( !this.hasGeneric || !inference){
            return this;
        }
        const elements = this.elements.map( item=>inference(item.type()) );
        return new UnionType(elements,this.target);
    }
    checkItems( items ){
        return items.every(item=>{
            return this.elements.some( base=>base.type().check(item) );
        });
    }
    is(type){
        if( !type || !(type instanceof Type) )return false;
        if( type.isGenericValueType ){
            type = type.value;
            if( !type ){
                return true;
            }
        }
        if( type === this || type.isNullableType || type.isAnyType || (type.isUnionType && type.target === this.target) )return true;
        if( type.isUnionType ){
            return this.elements.every( item=>{
                const base = item.type();
                return type.elements.some( child=>base.is( child) );
            });
        }
        return this.elements.some( base=>base.type().is(type) );
    }
    toString(){
        return this.elements.map( item=>item.type().toString() ).join(" | ");
    }
}
module.exports = UnionType;