const Type = require("./Type");
class LiteralArrayType extends Type{
    constructor(inherit,target,elements=null){
        super("$LiteralArrayType",inherit)
        this.isLiteralArrayType = true;
        this.target = target;
        this.elements = elements || target.elements;
        this.hasGeneric = this.elements.some(item=>{
            const type =  item.type();
            return !!(type.isGenericType || type.hasGeneric);
        });
    }
    attribute( index ){
        return this.target.attribute(index);
    }
    clone(inference){
        if( !this.hasGeneric || !inference){
            return this;
        }
        const elements = this.elements.map( item=>inference(item.type()) );
        return new LiteralArrayType(this.inherit, this.target, elements);
    }
    is( type){
        if( !type || !(type instanceof Type) )return false;
        if( type.isGenericValueType ){
            type = type.value;
            if( !type ){
                return true;
            }
        }
        if( type === this || type.isNullableType || type.isAnyType )return true;
        if( type.isLiteralArrayType && type.target === this.target )return true;
        return this.inherit.is( type.isLiteralArrayType ? type.inherit : type );
    }
    toString(){
        const elements = this.elements.map( item=>item.type().toString() ).join(",");
        return `[${elements}]`;
    }
}
module.exports = LiteralArrayType;